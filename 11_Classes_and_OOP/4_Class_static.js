// -------------------------------------ЁЯФ╣ class рдХреНрдпрд╛ рд╣реИ?  ----------------------------------------
// JavaScript рдореЗрдВ class рдПрдХ blueprint рд╣реИ рдЬрд┐рд╕рд╕реЗ рдЖрдк object рдмрдирд╛ рд╕рдХрддреЗ рд╣реЛред рдЬреИрд╕реЗ templateред
// Example :--------
//          class Car {
                  // properties and methods рдпрд╣рд╛рдБ рд╣реЛрдВрдЧреЗ
//          }



// -------------------------------------  ЁЯФ╣ constructor рдХреНрдпрд╛ рд╣реИ?  ------------------------------------
// constructor() рдПрдХ special method рд╣реИ рдЬреЛ object рдмрдирддреЗ рд╕рдордп рдЕрдкрдиреЗ рдЖрдк call рд╣реЛрддрд╛ рд╣реИред рдЗрд╕рдореЗрдВ рдЖрдк object рдХреА initial values set рдХрд░ рд╕рдХрддреЗ рд╣реЛред
// Example :----------------
class Car {
  constructor(brand, model) {
    this.brand = brand;
    this.model = model;
  }
  showDetails() {
    console.log(`Brand: ${this.brand}, Model: ${this.model}`);
  }
}
const myCar = new Car("Toyota", "Innova");
myCar.showDetails();  
// Output: Brand: Toyota, Model: Innova



// -----------------------------------------ЁЯФ╣ static рдХреНрдпрд╛ рд╣реИ?   ---------------------------------
// static method/class property рдХреЛ object рд╕реЗ рдирд╣реАрдВ, class рд╕реЗ directly call рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рдпреЗ method object рдкрд░ рдирд╣реАрдВ, class рдкрд░ apply рд╣реЛрддрд╛ рд╣реИред
// Example :--------------
class MathHelper {
  static add(a, b) {
    return a + b;
  }
}
console.log(MathHelper.add(10, 20));  // Output: 30

// рдпреЗ рдХрд╛рдо рдирд╣реАрдВ рдХрд░реЗрдЧрд╛:
// const helper = new MathHelper();
// helper.add(10, 20); тЭМ

// ЁЯФ╣ Real-Life Static Example:----------------------
class Calculator {
  static add(a, b) {
    return a + b;
  }

  static sub(a, b) {
    return a - b;
  }
}

console.log(Calculator.add(5, 3));  // 8
console.log(Calculator.sub(10, 4)); // 6



